{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["App","props","state","coefficient","sum","profitFromCustomerEngineer","deductionFromCustomerEngineer","refillingCartridges","machineMaintenance","filePicked","oEvent","self","oFile","target","files","reader","FileReader","onload","e","data","result","cfb","XLS","CFB","read","type","wb","parse_xlscfb","SheetNames","forEach","sheetName","array","i","length","parseInt","console","log","setState","SUM","utils","sheet_to_row_object_array","Sheets","map","total","readAsBinaryString","handleChangeCoefficient","bind","handleChangeProfitFromCustomerEngineer","handleChangeDeductionFromCustomerEnginee","handleChangeRefillingCartridges","handleChangeMachineMaintenance","this","currentTarget","value","fourth","fife","className","for","id","name","placeholder","onChange","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.908804c0.chunk.js","sourcesContent":["import React from 'react';\n/* global XLS */\nimport './App.css';\nimport 'bootstrap/dist/css/bootstrap.css';\nclass App extends React.Component{\n  constructor(props) {\n    super(props);\n    this.handleChangeCoefficient = this.handleChangeCoefficient.bind(this);\n    this.handleChangeProfitFromCustomerEngineer = this.handleChangeProfitFromCustomerEngineer.bind(this);\n    this.handleChangeDeductionFromCustomerEnginee = this.handleChangeDeductionFromCustomerEnginee.bind(this);\n    this.handleChangeRefillingCartridges = this.handleChangeRefillingCartridges.bind(this);\n    this.handleChangeMachineMaintenance = this.handleChangeMachineMaintenance.bind(this);\n  }\n    state = {\n      coefficient: 1,\n      sum: 0,\n      profitFromCustomerEngineer: 0,\n      deductionFromCustomerEngineer: 0,\n      refillingCartridges: 0,\n      machineMaintenance: 0,\n    }\n      handleChangeCoefficient(e){\n        this.setState({coefficient: e.currentTarget.value})\n      }\n      handleChangeProfitFromCustomerEngineer(e){\n        this.setState({profitFromCustomerEngineer: e.currentTarget.value})\n      }\n      handleChangeDeductionFromCustomerEnginee(e){\n        this.setState({deductionFromCustomerEngineer: e.currentTarget.value})\n      }\n      handleChangeRefillingCartridges(e){\n        this.setState({refillingCartridges: e.currentTarget.value})\n      }\n      handleChangeMachineMaintenance(e){\n        this.setState({machineMaintenance: e.currentTarget.value})\n      }\n      \n    filePicked =(oEvent)=> {\n      var self = this;\n        // Get The File From The Input\n    let oFile = oEvent.target.files[0];\n    \n    // Create A File Reader HTML5\n    var reader = new FileReader();\n\n    // Ready The Event For When A File Gets Selected\n    reader.onload = function(e) {\n        var data = e.target.result;\n        var cfb = XLS.CFB.read(data, {type: 'binary'});\n        var wb = XLS.parse_xlscfb(cfb);\n        // Loop Over Each Sheet\n        wb.SheetNames.forEach(function(sheetName) {             \n            var oJS = XLS.utils.sheet_to_row_object_array(wb.Sheets[sheetName]);   \n            // console.log(oJS[1].total) //вывести сумму из 2го объекта\n            var sum_all_arr = oJS.map(function(sum){\n              return sum.total\n            });           \n              // console.log(sum_all_arr);//массив из сумм\n             var SUM = function(array){\n                var sum = 0;\n                for(var i = 0; i < array.length; i++){\n                  sum += parseInt (array[i], 10);//сложить все суммы, перевод из сток в числа\n                }                \n                console.log(sum);// выводит итоговую сумму за всех клиентов \n                self.setState({sum})  //обновляем состояние суммы    \n              }\n              SUM(sum_all_arr);\n        });\n    };\n    // Tell JS To Start Reading The File.. You could delay this if desired\n    reader.readAsBinaryString(oFile);\n    }\n    \n      render(){\n        const rateWorker = 15480\n        const {coefficient, sum, deductionFromCustomerEngineer, profitFromCustomerEngineer, refillingCartridges, machineMaintenance} = this.state\n        const first = sum * coefficient\n        const second = profitFromCustomerEngineer - deductionFromCustomerEngineer\n        const third = first + second\n        const fourth = machineMaintenance * 0.5\n        const fife = third + parseInt(refillingCartridges, 10)\n        return(\n          <div className = \"section\">\n            <div className = \"container\">\n              <div className = \"row\">\n                <div className = \"col-lg-6 col-lg-offset-3\">\n                  <form>\n                    <div className = \"form-group\">\n                      <label for = \"upload_file\">Выберите файл</label>\n                        <input \n                          id=\"upload_file\" \n                          type = \"file\"  \n                          name=\"files[]\" \n                          className = \"form-control-file\" \n                          placeholder = \"выберите файл xls\"\n                          onChange = {this.filePicked}\n                        />\n                      <label for = \"enter_coefficient\">Введите коэффициент</label>\n                        <input \n                          type = \"text\"\n                          id = \"enter_coefficient\"\n                          className = \"form-control\"\n                          onChange = {this.handleChangeCoefficient}\n                          placeholder = \"коэффициент\"\n                          value = {coefficient}\n                        />\n                      <label for = \"enter_profitFromCustomerEngineer\">\n                        + Клиенты инженера\n                      </label>\n                        <input \n                          type = \"text\"\n                          id = \"enter_profitFromCustomerEngineer\"\n                          className = \"form-control\"\n                          onChange = {this.handleChangeProfitFromCustomerEngineer}\n                          placeholder = \"плюс клиенты инженера\"\n                          value = {profitFromCustomerEngineer}\n                        />\n                      <label for = \"enter_deductionFromCustomerEngineer\">\n                        - Клиенты инженера\n                      </label>\n                        <input \n                          type = \"text\"\n                          id = \"enter_deductionFromCustomerEngineer\"\n                          className = \"form-control\"\n                          onChange = {this.handleChangeDeductionFromCustomerEnginee}\n                          placeholder = \"минус клиенты инженера\"\n                          value = {deductionFromCustomerEngineer}\n                        />\n                      <label for = \"enter_refillingCartridges\">\n                        Заправка картриджей\n                      </label>\n                        <input \n                          type = \"text\"\n                          id = \"enter_refillingCartridges\"\n                          className = \"form-control\"\n                          onChange = {this.handleChangeRefillingCartridges}\n                          placeholder = \"заправка\"\n                          value = {refillingCartridges}\n                        />\n                      <label for = \"enter_machineMaintenance\">\n                        Расходы на машину\n                      </label>\n                        <input \n                          type = \"text\"\n                          id = \"enter_machineMaintenance\"\n                          className = \"form-control\"\n                          onChange = {this.handleChangeMachineMaintenance}\n                          placeholder = \"расходы на машину\"\n                          value = {machineMaintenance}\n                        />\n                    <p>Всего:{fife}</p>\n                    <p>К выплате:{fife - fourth - rateWorker} </p>\n          </div>\n            </form>\n              </div>\n                </div>\n                  </div>\n                    </div>\n        )\n      }\n    }\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\n\nReactDOM.render(<App />,              \n                document.getElementById('root'));\n\n\nserviceWorker.unregister();\n"],"sourceRoot":""}