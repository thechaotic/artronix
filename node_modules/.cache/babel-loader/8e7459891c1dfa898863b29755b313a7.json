{"ast":null,"code":"var _jsxFileName = \"D:\\\\ahtung\\\\\\u0440\\u0435\\u0430\\u043A\\u0442\\\\zp2\\\\zp2\\\\src\\\\App.js\";\nimport React from 'react';\n/* global XLS */\n\nimport './App.css';\nimport 'bootstrap/dist/css/bootstrap.css';\nimport FormInputs from './FormInputs';\n\nclass App extends React.Component {\n  constructor(...args) {\n    super(...args);\n\n    this.filePicked = oEvent => {\n      var self = this; // Get The File From The Input\n\n      let oFile = oEvent.target.files[0]; // Create A File Reader HTML5\n\n      var reader = new FileReader(); // Ready The Event For When A File Gets Selected\n\n      reader.onload = function (e) {\n        var data = e.target.result;\n        var cfb = XLS.CFB.read(data, {\n          type: 'binary'\n        });\n        var wb = XLS.parse_xlscfb(cfb); // Loop Over Each Sheet\n\n        wb.SheetNames.forEach(function (sheetName) {\n          var oJS = XLS.utils.sheet_to_row_object_array(wb.Sheets[sheetName]); // console.log(oJS[1].total) //вывести сумму из 2го объекта\n\n          var sum_all_arr = oJS.map(function (sum) {\n            return sum.total;\n          }); // console.log(sum_all_arr);//массив из сумм\n\n          var SUM = function (array) {\n            var sum = 0;\n\n            for (var i = 0; i < array.length; i++) {\n              sum += parseInt(array[i], 10); //сложить все суммы, перевод из сток в числа\n            }\n\n            console.log(sum); // выводит итоговую сумму за всех клиентов \n\n            self.setState({\n              sum\n            }); //обновляем состояние суммы    \n          };\n\n          SUM(sum_all_arr);\n        });\n      }; // Tell JS To Start Reading The File.. You could delay this if desired\n\n\n      reader.readAsBinaryString(oFile);\n    };\n  }\n\n  render() {\n    const rateWorker = 15480; // const {coefficient, sum, deductionFromCustomerEngineer, profitFromCustomerEngineer, refillingCartridges, machineMaintenance} = this.state\n\n    const first = sum * coefficient;\n    const second = profitFromCustomerEngineer - deductionFromCustomerEngineer;\n    const third = first + second;\n    const fourth = machineMaintenance * 0.5;\n    const fife = third + parseInt(refillingCartridges, 10);\n    return React.createElement(\"div\", {\n      className: \"section\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 84\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"container\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 85\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"row\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 86\n      },\n      __self: this\n    }, React.createElement(FormInputs, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 87\n      },\n      __self: this\n    }))));\n  }\n\n}\n\nexport default App;","map":{"version":3,"sources":["D:/ahtung/реакт/zp2/zp2/src/App.js"],"names":["React","FormInputs","App","Component","filePicked","oEvent","self","oFile","target","files","reader","FileReader","onload","e","data","result","cfb","XLS","CFB","read","type","wb","parse_xlscfb","SheetNames","forEach","sheetName","oJS","utils","sheet_to_row_object_array","Sheets","sum_all_arr","map","sum","total","SUM","array","i","length","parseInt","console","log","setState","readAsBinaryString","render","rateWorker","first","coefficient","second","profitFromCustomerEngineer","deductionFromCustomerEngineer","third","fourth","machineMaintenance","fife","refillingCartridges"],"mappings":"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","sourcesContent":["import React from 'react';\n/* global XLS */\nimport './App.css';\nimport 'bootstrap/dist/css/bootstrap.css';\nimport FormInputs from './FormInputs';\nclass App extends React.Component{\n  // constructor(props) {\n  //   super(props);\n  //   this.handleChangeCoefficient = this.handleChangeCoefficient.bind(this);\n  //   this.handleChangeProfitFromCustomerEngineer = this.handleChangeProfitFromCustomerEngineer.bind(this);\n  //   this.handleChangeDeductionFromCustomerEnginee = this.handleChangeDeductionFromCustomerEnginee.bind(this);\n  //   this.handleChangeRefillingCartridges = this.handleChangeRefillingCartridges.bind(this);\n  //   this.handleChangeMachineMaintenance = this.handleChangeMachineMaintenance.bind(this);\n  // }\n  //   state = {\n  //     coefficient: 1,\n  //     sum: 0,\n  //     profitFromCustomerEngineer: 0,\n  //     deductionFromCustomerEngineer: 0,\n  //     refillingCartridges: 0,\n  //     machineMaintenance: 0,\n  //   }\n  //     handleChangeCoefficient(e){\n  //       this.setState({coefficient: e.currentTarget.value})\n  //     }\n  //     handleChangeProfitFromCustomerEngineer(e){\n  //       this.setState({profitFromCustomerEngineer: e.currentTarget.value})\n  //     }\n  //     handleChangeDeductionFromCustomerEnginee(e){\n  //       this.setState({deductionFromCustomerEngineer: e.currentTarget.value})\n  //     }\n  //     handleChangeRefillingCartridges(e){\n  //       this.setState({refillingCartridges: e.currentTarget.value})\n  //     }\n  //     handleChangeMachineMaintenance(e){\n  //       this.setState({machineMaintenance: e.currentTarget.value})\n  //     }\n      \n    filePicked =(oEvent)=> {\n      var self = this;\n        // Get The File From The Input\n    let oFile = oEvent.target.files[0];\n    \n    // Create A File Reader HTML5\n    var reader = new FileReader();\n\n    // Ready The Event For When A File Gets Selected\n    reader.onload = function(e) {\n        var data = e.target.result;\n        var cfb = XLS.CFB.read(data, {type: 'binary'});\n        var wb = XLS.parse_xlscfb(cfb);\n        // Loop Over Each Sheet\n        wb.SheetNames.forEach(function(sheetName) {             \n            var oJS = XLS.utils.sheet_to_row_object_array(wb.Sheets[sheetName]);   \n            // console.log(oJS[1].total) //вывести сумму из 2го объекта\n            var sum_all_arr = oJS.map(function(sum){\n              return sum.total\n            });           \n              // console.log(sum_all_arr);//массив из сумм\n             var SUM = function(array){\n                var sum = 0;\n                for(var i = 0; i < array.length; i++){\n                  sum += parseInt (array[i], 10);//сложить все суммы, перевод из сток в числа\n                }                \n                console.log(sum);// выводит итоговую сумму за всех клиентов \n                self.setState({sum})  //обновляем состояние суммы    \n              }\n              SUM(sum_all_arr);\n        });\n    };\n    // Tell JS To Start Reading The File.. You could delay this if desired\n    reader.readAsBinaryString(oFile);\n    }\n    \n      render(){\n        const rateWorker = 15480\n        // const {coefficient, sum, deductionFromCustomerEngineer, profitFromCustomerEngineer, refillingCartridges, machineMaintenance} = this.state\n        const first = sum * coefficient\n        const second = profitFromCustomerEngineer - deductionFromCustomerEngineer\n        const third = first + second\n        const fourth = machineMaintenance * 0.5\n        const fife = third + parseInt(refillingCartridges, 10)\n        return(\n          <div className = \"section\">\n            <div className = \"container\">\n              <div className = \"row\">\n                <FormInputs />\n                {/* <div className = \"col-lg-6 col-lg-offset-3\">\n                  <form>\n                    <div className = \"form-group\">\n                      <label for = \"upload_file\">Выберите файл</label>\n                        <input \n                          id=\"upload_file\" \n                          type = \"file\"  \n                          name=\"files[]\" \n                          className = \"form-control-file\" \n                          placeholder = \"выберите файл xls\"\n                          onChange = {this.filePicked}\n                        />\n                      <label for = \"enter_coefficient\">Введите коэффициент</label>\n                        <input \n                          type = \"text\"\n                          id = \"enter_coefficient\"\n                          className = \"form-control\"\n                          onChange = {this.handleChangeCoefficient}\n                          placeholder = \"коэффициент\"\n                          value = {coefficient}\n                        />\n                      <label for = \"enter_profitFromCustomerEngineer\">\n                        + Клиенты инженера\n                      </label>\n                        <input \n                          type = \"text\"\n                          id = \"enter_profitFromCustomerEngineer\"\n                          className = \"form-control\"\n                          onChange = {this.handleChangeProfitFromCustomerEngineer}\n                          placeholder = \"плюс клиенты инженера\"\n                          value = {profitFromCustomerEngineer}\n                        />\n                      <label for = \"enter_deductionFromCustomerEngineer\">\n                        - Клиенты инженера\n                      </label>\n                        <input \n                          type = \"text\"\n                          id = \"enter_deductionFromCustomerEngineer\"\n                          className = \"form-control\"\n                          onChange = {this.handleChangeDeductionFromCustomerEnginee}\n                          placeholder = \"минус клиенты инженера\"\n                          value = {deductionFromCustomerEngineer}\n                        />\n                      <label for = \"enter_refillingCartridges\">\n                        Заправка картриджей\n                      </label>\n                        <input \n                          type = \"text\"\n                          id = \"enter_refillingCartridges\"\n                          className = \"form-control\"\n                          onChange = {this.handleChangeRefillingCartridges}\n                          placeholder = \"заправка\"\n                          value = {refillingCartridges}\n                        />\n                      <label for = \"enter_machineMaintenance\">\n                        Расходы на машину\n                      </label>\n                        <input \n                          type = \"text\"\n                          id = \"enter_machineMaintenance\"\n                          className = \"form-control\"\n                          onChange = {this.handleChangeMachineMaintenance}\n                          placeholder = \"расходы на машину\"\n                          value = {machineMaintenance}\n                        />\n                    <p>Итого:{fife - fourth - rateWorker}</p>\n          </div>\n            </form>\n              </div> */}\n                </div>\n                  </div>\n                    </div>\n        )\n      }\n    }\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}